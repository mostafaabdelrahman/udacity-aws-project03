version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Test frontend
          command: |
            cd frontend/node_modules
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Test backend
          command: |
            cd backend/node_modules
            npm run test        

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Scan backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Programmatically save the new back-end url using MemStash.io
      #     command: |
      #       # Get BackendURL from cloudformation outputs
      #       export backend_url=$(aws cloudformation \
      #       list-exports --query "Exports[?Name==\`BackendURL\`].Value" \
      #       --no-paginate --output text)
      #       # Save to MemStash.io
      #       curl -H "Content-Type: text/plain" \
      #         -H "token: 0a5dd469-1b30-49bc-a209-200e1a3c0971" --request PUT \
      #         --data "$backend_url" https://api.memstash.io/values/backend_url

      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt

      - run:
          name: Install persist_to_workspace dependencies
          command: |
            yum -y install tar gzip

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    # add env var for ssh key checking bypass
    environment:
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["43:26:dd:2e:16:e6:d7:87:c3:49:45:d4:6e:ff:57:50"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: "Install Ansible using apk, AWSCLI using pip"
          command: |
            apk add --no-cache ansible python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - destroy-environment  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            # npm run build
            npm run migrations >> migrations.log
            cat migrations.log

      - run:
          name: Send migration results to memstash
          command: |
            if [ grep -q "has been executed successfully" migrations.log ]
            then
              echo "migrated"
              curl -H "Content-Type: text/plain" -H "token: tkn-${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "failed"
              curl -H "Content-Type: text/plain" -H "token: tkn-${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
    #  # Here's where you will add some code to rollback on failure      
    #   - revert-migrations
    #   - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

workflows:
  udapeople-workflow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure
      #     # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations