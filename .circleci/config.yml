version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=`curl -H "token: mg-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if [ $SUCCESS==1 ]; 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-{{ checksum ".circleci/config.yml" }}']
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum ".circleci/config.yml" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum ".circleci/config.yml" }}']
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum ".circleci/config.yml" }}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-{{ checksum ".circleci/config.yml" }}']
      - run:
          name: Test frontend
          command: |
            cd frontend/node_modules
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum ".circleci/config.yml" }}']
      - run:
          name: Test backend
          command: |
            cd backend/node_modules
            npm run test        

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-{{ checksum ".circleci/config.yml" }}']
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum ".circleci/config.yml" }}']
      - run:
          name: Scan backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Programmatically save the new back-end url using MemStash.io
          command: |
            # Get BackendURL from cloudformation outputs
            export backend_url=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`BackendURL\`].Value" \
            --no-paginate --output text)
            # Save to MemStash.io
            curl -H "Content-Type: text/plain" \
              -H "token: be-${CIRCLE_WORKFLOW_ID}" --request PUT \
              --data "$backend_url" https://api.memstash.io/values/backend_url
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Install persist_to_workspace dependencies
          command: |
            yum -y install tar gzip

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    # add env var for ssh key checking bypass
    environment:
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["43:26:dd:2e:16:e6:d7:87:c3:49:45:d4:6e:ff:57:50"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: "Install Ansible using apk, AWSCLI using pip"
          command: |
            apk add --no-cache ansible python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            echo "35.162.120.217" >> .circleci/ansible/inventory.txt
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - destroy-environment  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Install AWSCLI
          command: |
            sudo apt update -y && sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations >> migrations.log
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations.log
            then
              curl -H "Content-Type: text/plain" -H "token: mg-${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              curl -H "Content-Type: text/plain" -H "token: mg-${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum update -y && yum -y install nodejs 
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL=$(curl -H "token: be-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_url)
            echo "${API_URL}" >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=$(cat frontend/.env)
            cd frontend
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
            # aws s3 cp ./dist s3://udapeople-mostafaabdelrahman --recursive
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["43:26:dd:2e:16:e6:d7:87:c3:49:45:d4:6e:ff:57:50"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: "Install dependencies (ansible, awscli)" 
          command: |
            apk add --no-cache ansible python3 py3-pip curl
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: "Create .env file inside backend directory"
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: "Deploy backend using Ansible"
          command: |
            # Simulate getting IP in inventory from workspace
            echo "35.162.120.217" >> .circleci/ansible/inventory.txt
            #cat .circleci/ansible/inventory.txt
            tar -C backend -czf artifact.tar.gz .
            ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
          no_output_timeout: 60m
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: |
            apk add --no-cache nodejs npm python3 py3-pip curl
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: "Get backend url and Backend smoke test"
          command: |
            export API_URL=$(curl -H "token: be-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_url)
            export BACKEND_URL="$API_URL/api/status"
            curl $BACKEND_URL && echo "Backend smoke test SUCCESS !" || echo "Backend smoke test failed !"
      - run:
          name: "Frontend smoke test."
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi            
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum update -y && yum -y install nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            echo Old Workflow ID: "$OldWorkflowID"

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            curl -H "Content-Type: text/plain" -H "token: OldWorkflowID-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Get old stack workflow id and remove old stacks and files"
          command: |
            export OldWorkflowID=$(curl -H "token: OldWorkflowID-${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/OldWorkflowID)

            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)

            echo Old Workflow ID: "$OldWorkflowID"
            echo STACKS: "$STACKS" 
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            fi

workflows:
  udapeople-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master] 
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]