version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Test frontend
          command: |
            cd frontend/node_modules
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Test backend
          command: |
            cd backend/node_modules
            npm run test        

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['frontend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-${CIRCLE_WORKFLOW_ID:0:7}']
      - run:
          name: Scan backend
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical --force

workflows:
  udapeople-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
